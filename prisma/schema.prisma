// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Society {
    id     String   @id @default(cuid())
    name   ClubType
    admins User[]
    tasks  Task[]
}

model Task {
    id        String          @id @default(cuid())
    name      String
    points    Int             @default(100)
    type      TaskType        @default(SOCIETY)
    Society   Society?        @relation(fields: [societyId], references: [id])
    societyId String?
    users     CompletedTask[]
}

model User {
    id             String          @id @default(cuid())
    name           String          @unique
    password       String
    email          String
    ticketID       String          
    createdAt      DateTime        @default(now())
    emailVerified  DateTime?
    type           UserType        @default(PARTICIPANT)
    image          String?
    accounts       Account[]
    sessions       Session[]
    completedTasks CompletedTask[]
    societies      Society[]
    totalPoints    Int             @default(0)
}

model CompletedTask {
    task         Task     @relation(fields: [taskID], references: [id])
    taskID       String
    user         User     @relation(fields: [userID], references: [id])
    userID       String
    completedAt  DateTime @default(now())
    authorisedBy String

    @@id([taskID, userID])
}

enum TaskType {
    COSPLAY
    SOCIAL
    SOCIETY
}

enum UserType {
    PARTICIPANT
    ADMIN
}

enum ClubType {
    PCS
    ES
    RS
    KS
    FGS
    RGS
    VRS
    GS
    MCS
    PS
    SBS
    GDS
    SPONSOR
    COSPLAY
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @default(cuid())
    userId       String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
